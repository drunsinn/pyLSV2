[build-system]
requires = ["setuptools", "wheel", "setuptools_scm[toml]>=6.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[project]
name = "pyLSV2"
authors = [{ name = "drunsinn", email = "dr.unsinn@googlemail.com" }]
description = "A pure Python3 implementation of the LSV2 protocol"
requires-python = ">=3.6"
keywords = ["LSV2", "CNC", "PLC"]
dynamic = ["version", "readme"]
dependencies = []

[project.license]
file = "LICENSE"

[project.optional-dependencies]
SSH = ["sshtunnel>=0.4"]

[project.urls]
"Homepage" = "https://github.com/drunsinn/pyLSV2"
"Bug Tracker" = "https://github.com/drunsinn/pyLSV2/issues"

[project.scripts]
lsv2demo = "pyLSV2.scripts.demo:comprehensive_demo"
lsv2demo_scope = "pyLSV2.scripts.demo:scope_demo"
lsv2demo_ssh = "pyLSV2.scripts.ssh_tunnel:main"
lsv2scope2csv = "pyLSV2.scripts.scope2csv:main"
lsv2tab2csv = "pyLSV2.scripts.tab2csv:main"
lsv2cmd = "pyLSV2.scripts.cmd:main"

[tool.setuptools]
packages = [
    "pyLSV2",
    "pyLSV2.scripts",
    "pyLSV2.locales.en.LC_MESSAGES",
    "pyLSV2.locales.de.LC_MESSAGES",
]

[tool.setuptools.dynamic]
version = { attr = "pyLSV2.__version__" }
readme = { file = ["README.md"], content-type = "text/markdown" }

[tool.black]
line-length = 140
target-version = ["py36"]
include = "\\.pyi?$"
verbose = true

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
addopts = "--address 192.168.56.101"
#addopts = "--address 192.168.56.102"
#addopts = "--address 192.168.56.103"
#addopts = "--address localhost"

[tool.codespell]
skip = "*.po,*.ts,./docs/_build,./docs/_static,./.git"
count = ""
quiet-level = 3
ignore-words-list = "spindel"

[tool.pylint.main]
fail-under = 9
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 0
limit-inference-results = 100
persistent = true
py-version = "3.6"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_", "pyLSV2"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "asyncSetUp",
    "__post_init__",
]
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "os._exit",
]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 120
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
    "consider-using-f-string",
]

[tool.pylint.method_args]

timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO", "ToDo"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]
